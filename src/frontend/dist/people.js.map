{"version":3,"sources":["webpack:///./frontend/src/scenes/users/PeopleTable.js","webpack:///./frontend/src/scenes/users/CohortGroup.js","webpack:///./frontend/src/scenes/users/Cohort.js","webpack:///./frontend/src/scenes/users/People.js"],"names":["PeopleTable","people","loading","actions","onChange","columns","title","dataIndex","key","render","_","person","to","encodeURIComponent","distinct_ids","className","name","push","danger","type","onClick","deletePersonData","size","rowKey","id","pagination","pageSize","hideOnSinglePage","expandable","expandedRowRender","properties","rowExpandable","Object","keys","length","dataSource","CohortGroup","props","state","days","selected","group","action_id","DayChoice","bind","this","index","onRemove","style","margin","height","setState","marginLeft","minHeight","PropertyFilters","endpoint","pageKey","propertyFilters","marginTop","width","options","placeholder","item","value","filter","action","Component","_Cohort","groups","window","location","search","indexOf","fromParams","fetchProperties","call","fetchActions","onSave","fetchCohort","api","get","then","cohort","e","preventDefault","onResponse","toast","pathname","update","create","map","property","label","results","marginBottom","maxWidth","onSubmit","required","autoFocus","target","splice","reduce","prev","curr","textAlign","Cohort","router","People","useState","setLoading","setPeople","setSearch","cohortId","setCohortId","setPagination","fetchPeople","url","scrollTop","document","querySelector","parentNode","scrollTo","top","behavior","data","next","previous","useEffect","exampleEmail","email","d","icon","ExportOutlined","href","onKeyDown","keyCode","disabled","LeftOutlined","verticalAlign","RightOutlined"],"mappings":"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","file":"people.js","sourcesContent":["import React from 'react'\nimport { Button, Table } from 'antd'\nimport api from 'lib/api'\nimport { Link } from 'lib/components/Link'\nimport { PropertiesTable } from 'lib/components/PropertiesTable'\nimport { DeleteOutlined } from '@ant-design/icons'\nimport { deletePersonData } from 'lib/utils'\n\nexport function PeopleTable({ people, loading, actions, onChange }) {\n    let columns = [\n        {\n            title: 'Person',\n            dataIndex: 'name',\n            key: 'name',\n            render: (_, person) => (\n                <Link to={'/person/' + encodeURIComponent(person.distinct_ids[0])} className=\"ph-no-capture\">\n                    {person.name}\n                </Link>\n            ),\n        },\n    ]\n    if (actions)\n        columns.push({\n            title: 'Actions',\n            render: person => (\n                <Button danger type=\"link\" onClick={() => deletePersonData(person, onChange)}>\n                    <DeleteOutlined />\n                </Button>\n            ),\n        })\n\n    return (\n        <Table\n            size=\"small\"\n            columns={columns}\n            loading={loading}\n            rowKey={person => person.id}\n            pagination={{ pageSize: 100, hideOnSinglePage: true }}\n            expandable={{\n                expandedRowRender: ({ properties }) => <PropertiesTable properties={properties} />,\n                rowExpandable: ({ properties }) => Object.keys(properties).length > 0,\n            }}\n            dataSource={people}\n        />\n    )\n}\n","import React, { Component } from 'react'\nimport { Card, CloseButton } from '../../lib/utils'\nimport { PropertyFilters } from '../../lib/components/PropertyFilters/PropertyFilters'\nimport Select from 'react-select'\n\nexport class CohortGroup extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            days: 1,\n            selected: (props.group.action_id && 'action') || (props.group.properties && 'property'),\n        }\n        this.DayChoice = this.DayChoice.bind(this)\n    }\n    DayChoice(props) {\n        return (\n            <button\n                onClick={() =>\n                    this.props.onChange({\n                        action_id: this.props.group.action_id,\n                        days: props.days,\n                    })\n                }\n                type=\"button\"\n                className={'btn btn-sm ' + (this.props.group.days == props.days ? 'btn-secondary' : 'btn-light')}\n            >\n                {props.name}\n            </button>\n        )\n    }\n    render() {\n        let { group, index, properties, actions, onChange, onRemove } = this.props\n        let { selected } = this.state\n        return (\n            <Card title={false} style={{ margin: 0 }}>\n                <div className=\"card-body\">\n                    {index > 0 && <CloseButton className=\"float-right\" onClick={onRemove} />}\n                    <div style={{ height: 32 }}>\n                        User has\n                        {selected == 'action' && ' done '}\n                        <div className=\"btn-group\" style={{ margin: '0 8px' }}>\n                            <button\n                                onClick={() => this.setState({ selected: 'action' })}\n                                type=\"button\"\n                                className={'btn btn-sm ' + (selected == 'action' ? 'btn-secondary' : 'btn-light')}\n                            >\n                                action\n                            </button>\n                            <button\n                                onClick={() => this.setState({ selected: 'property' })}\n                                type=\"button\"\n                                className={'btn btn-sm ' + (selected == 'property' ? 'btn-secondary' : 'btn-light')}\n                            >\n                                property\n                            </button>\n                        </div>\n                        {selected == 'action' && (\n                            <span>\n                                in the last\n                                <div className=\"btn-group\" style={{ margin: '0 8px' }}>\n                                    <this.DayChoice days={1} name=\"day\" />\n                                    <this.DayChoice days={7} name=\"7 days\" />\n                                    <this.DayChoice days={30} name=\"month\" />\n                                </div>\n                            </span>\n                        )}\n                    </div>\n                    {selected && (\n                        <div style={{ marginLeft: '2rem', minHeight: 38 }}>\n                            {selected == 'property' && (\n                                <PropertyFilters\n                                    endpoint=\"person\"\n                                    pageKey=\"cohort\"\n                                    className=\" \"\n                                    onChange={properties =>\n                                        onChange({\n                                            properties: properties,\n                                            days: group.days,\n                                        })\n                                    }\n                                    propertyFilters={group.properties || {}}\n                                    style={{ margin: '1rem 0 0' }}\n                                />\n                            )}\n                            {selected == 'action' && (\n                                <div style={{ marginTop: '1rem', width: 350 }}>\n                                    <Select\n                                        options={actions}\n                                        placeholder=\"Select action...\"\n                                        onChange={item => onChange({ action_id: item.value })}\n                                        value={actions && actions.filter(action => action.value == group.action_id)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </Card>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Card, CloseButton, fromParams } from 'lib/utils'\nimport api from 'lib/api'\nimport { toast } from 'react-toastify'\nimport { CohortGroup } from './CohortGroup'\nimport { router } from 'kea-router'\n\nexport class _Cohort extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            groups: window.location.search.indexOf('new_cohort') > -1 ? [{}] : [],\n            id: fromParams()['cohort'],\n            name: '',\n        }\n        this.fetchProperties.call(this)\n        this.fetchActions.call(this)\n        this.onSave = this.onSave.bind(this)\n        if (this.state.id) this.fetchCohort.call(this)\n    }\n    fetchCohort() {\n        api.get('api/cohort/' + this.state.id).then(cohort => this.setState(cohort))\n    }\n    onSave(e) {\n        e.preventDefault()\n        let cohort = {\n            id: this.state.id,\n            name: this.state.name,\n            groups: this.state.groups,\n        }\n        let onResponse = cohort => {\n            this.props.onChange(cohort.id)\n            this.setState({ id: cohort.id })\n            toast('Cohort saved.')\n            this.actions.push(this.props.location.pathname, { cohort: cohort.id })\n        }\n        if (this.state.id) {\n            return api.update('api/cohort/' + this.state.id, cohort).then(onResponse)\n        }\n        api.create('api/cohort', cohort).then(onResponse)\n    }\n    fetchProperties() {\n        api.get('api/person/properties').then(properties => {\n            this.setState({\n                properties: properties.map(property => ({\n                    label: property.name,\n                    value: property.name,\n                })),\n            })\n        })\n    }\n    fetchActions() {\n        api.get('api/action').then(actions => {\n            this.setState({\n                actions: actions.results.map(action => ({\n                    label: action.name,\n                    value: action.id,\n                })),\n            })\n        })\n    }\n    render() {\n        let { groups, properties, actions, name } = this.state\n        return groups.length === 0 ? (\n            <button\n                className=\"btn btn-sm btn-outline-success float-right\"\n                style={{ marginBottom: '1rem', marginLeft: 12 }}\n                onClick={() => this.setState({ groups: [{}] })}\n            >\n                + new cohort\n            </button>\n        ) : (\n            <div style={{ maxWidth: 750 }}>\n                <Card\n                    title={\n                        <span>\n                            <CloseButton\n                                className=\"float-right\"\n                                onClick={() => {\n                                    this.setState({ groups: [], id: false })\n                                    this.props.onChange()\n                                    this.actions.push(`${this.props.location.pathname}`)\n                                }}\n                            />\n                            {name || 'New cohort'}\n                        </span>\n                    }\n                >\n                    <form className=\"card-body\" onSubmit={this.onSave}>\n                        <input\n                            style={{ marginBottom: '1rem' }}\n                            required\n                            className=\"form-control\"\n                            autoFocus\n                            placeholder=\"Cohort name...\"\n                            value={name}\n                            onChange={e => this.setState({ name: e.target.value })}\n                        />\n                        {groups\n                            .map((group, index) => (\n                                <CohortGroup\n                                    key={index}\n                                    group={group}\n                                    properties={properties}\n                                    actions={actions}\n                                    index={index}\n                                    onRemove={() => {\n                                        groups.splice(index, 1)\n                                        this.setState({ groups })\n                                    }}\n                                    onChange={group => {\n                                        groups[index] = group\n                                        this.setState({ groups })\n                                    }}\n                                />\n                            ))\n                            .reduce((prev, curr) => [\n                                prev,\n                                <div className=\"secondary\" style={{ textAlign: 'center', margin: 8 }}>\n                                    {' '}\n                                    OR{' '}\n                                </div>,\n                                curr,\n                            ])}\n                        <button\n                            className=\"btn btn-outline-success btn-sm\"\n                            style={{ marginTop: '1rem' }}\n                            type=\"button\"\n                            onClick={() => this.setState({ groups: [...groups, {}] })}\n                        >\n                            New group\n                        </button>\n                        <button className=\"btn btn-success btn-sm float-right\" style={{ marginTop: '1rem' }}>\n                            Save cohort\n                        </button>\n                    </form>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport const Cohort = router(_Cohort)\n","import React, { useEffect, useState } from 'react'\nimport api from 'lib/api'\nimport { fromParams } from 'lib/utils'\nimport { Cohort } from './Cohort'\nimport { PeopleTable } from './PeopleTable'\n\nimport { Button } from 'antd'\nimport { ExportOutlined, LeftOutlined, RightOutlined } from '@ant-design/icons'\n\nexport function People() {\n    const [loading, setLoading] = useState(true)\n    const [people, setPeople] = useState(null)\n    const [search, setSearch] = useState('')\n    const [cohortId, setCohortId] = useState(fromParams()['cohort'])\n    const [pagination, setPagination] = useState({})\n\n    function fetchPeople({ url, scrollTop, search }) {\n        setLoading(true)\n        if (scrollTop)\n            document.querySelector('section.ant-layout > .content').parentNode.scrollTo({ top: 0, behavior: 'smooth' })\n        api.get(\n            url ? url : `api/person/?${!!search ? 'search=' + search : ''}${cohortId ? '&cohort=' + cohortId : ''}`\n        ).then(data => {\n            setPeople(data.results)\n            setLoading(false)\n            setPagination({ next: data.next, previous: data.previous })\n        })\n    }\n\n    useEffect(() => {\n        fetchPeople({})\n    }, [cohortId])\n\n    const exampleEmail =\n        (people && people.map(person => person.properties.email).filter(d => d)[0]) || 'example@gmail.com'\n\n    return (\n        <div>\n            <h1>Users</h1>\n            <Cohort onChange={setCohortId} />\n            <Button\n                className=\"float-right\"\n                type=\"default\"\n                icon={<ExportOutlined />}\n                href={'/api/person.csv' + (cohortId ? '?cohort=' + cohortId : '')}\n            >\n                Export\n            </Button>\n            <input\n                className=\"form-control\"\n                name=\"search\"\n                autoFocus\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n                onKeyDown={e => e.keyCode === 13 && fetchPeople({ search })}\n                placeholder={people && 'Try ' + exampleEmail + ' or has:email'}\n                style={{ maxWidth: 400 }}\n            />\n            <br />\n            <PeopleTable people={people} loading={loading} actions={true} onChange={() => fetchPeople({ search })} />\n\n            <div style={{ margin: '3rem auto 10rem', width: 200 }}>\n                <Button\n                    type=\"link\"\n                    disabled={!pagination.previous}\n                    onClick={() => fetchPeople({ url: pagination.previous, scrollTop: true })}\n                >\n                    <LeftOutlined style={{ verticalAlign: 'initial' }} /> Previous\n                </Button>\n                <Button\n                    type=\"link\"\n                    disabled={!pagination.next}\n                    onClick={() => fetchPeople({ url: pagination.next, scrollTop: true })}\n                >\n                    Next <RightOutlined style={{ verticalAlign: 'initial' }} />\n                </Button>\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}